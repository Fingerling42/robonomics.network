---
// components 
import Spinner from '../utils/LoaderSpin.vue'

const { book, gateway } = Astro.props;
---

<li class="e-books__item">
  <a class="e-books__img" href={gateway + book.options[0].link} aria-label="check the book" target="_blank">
    <img src={`/images/books/${book.img}`} alt={book.title} loading="lazy" />
  </a>

  <div class="e-books__content">
    <div class="e-book__header">
      <span>{book.year}</span>
      <h3>{book.title}</h3>
    </div>
    <div class="e-books__links-wrapper">
      <div id={`spinner-${book.id}`} class="spinner" style="display: none;">
        <Spinner/>
      </div>
      <div id={'book-options-' + book.id} class="e-books__links" style="display: none;"></div>
    </div>
  </div>
</li>

<script define:vars={{ book, gateway }}>
  const TIMEOUT_MS = 15_000;       
  const MAX_CACHE_AGE = 7 * 24 * 3600 * 1_000;   

  const fetchGateway = async (url, timeout = TIMEOUT_MS) => {
    const controller = new AbortController();
    const timer = setTimeout(() => controller.abort(), timeout);

    try {
      const res = await fetch(url, {
        method: "HEAD",               
        cache:  "no-store",
        signal: controller.signal,
      });
      return res.ok;
    } catch {                          
      return false;
    } finally {
      clearTimeout(timer);
    }
  };

  const getFreshCache = (key) => {
    const raw = localStorage.getItem(key);
    if (!raw) return null;

    try {
      const cached = JSON.parse(raw);
      const isFresh = Date.now() - Date.parse(cached.date) < MAX_CACHE_AGE;
      return isFresh ? cached : null;
    } catch {
      return null;
    }
  };

  const resolveLinks = async (options, gw) => {
    const entries = await Promise.all(
      options.map(async (opt) => {
        const cached = getFreshCache(opt.name);
        if (cached) return [opt.name, cached.link];
        const gatewayUrl = gw + opt.link;
        const ok = await fetchGateway(gatewayUrl);
        const finalUrl = ok ? gatewayUrl : opt.static;
        localStorage.setItem(
          opt.name,
          JSON.stringify({ link: finalUrl, date: new Date().toISOString() })
        );
        return [opt.name, finalUrl];
      })
    );
    return Object.fromEntries(entries);
  };

  document.addEventListener("DOMContentLoaded", async () => {
    const spinner   = document.querySelector(`#spinner-${book.id}`);
    const linksWrap = document.querySelector(`#book-options-${book.id}`);

    spinner.style.display = "block";

    let links = {};
    try {
      links = await resolveLinks(book.options, gateway);
    } finally {
      spinner.style.display   = "none";
      linksWrap.style.display = "block";
    }

    book.options.forEach((opt) => {
      const a = document.createElement("a");
      a.href        = links[opt.name] || opt.static;
      a.textContent = opt.text;
      a.target      = "_blank";
      linksWrap.appendChild(a);
    });
  });
</script>


<style>
  .e-books__item {
    display: grid;
    font-family: var(--font-family);
    font-weight: 900;
    grid-template-columns: 1fr;
  }

  h3 {
    margin-top: 0;
    margin-bottom: 0;
    font-family: inherit;
    font-size: calc(var(--base-font-size) * 0.9);
    text-align: left;
    text-transform: none;
    letter-spacing: 0;
  }

  .e-books__content {
    max-width: 578px;
    width: 100%;
    margin: 0 auto;
    padding: calc(var(--space) * 0.3) calc(var(--space) * 0.75);
    background-color: var(--color-light);
  }

  .e-book__header {
    display: flex;
    align-items: center;
  }

  .e-book__header span {
    display: inline-block;
    margin-right: calc(var(--space) * 0.5);
    font-weight: 600;
    font-size: calc(var(--base-font-size) * 0.9);
  }

  .e-books__links {
    font-weight: 500;
    max-width: 186px;
    font-size: calc(var(--base-font-size) * 0.8);
  }

  .e-books__links :global(a:not(:last-of-type)) {
    margin-right: calc(var(--space) * 0.5);
  }

  .e-books__img {
    max-width: 578px;
    display: block;
    margin: 0 auto;
  }

  @media screen and (max-width: 980px) {
    .e-books__content {
      text-align: center;
    }

    .e-book__header {
      justify-content: center;
    }

    .e-books__links {
      max-width: unset;
    }
  }
</style>
